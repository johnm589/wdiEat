{
  "name": "social",
  "version": "0.4.0",
  "description": "Multi-platform Social Client for Node",
  "author": {
    "name": "Tang Bo Hao",
    "email": "btspoony@gmail.com",
    "url": "http://blog.boisgames.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/btspoony/node-social.git"
  },
  "main": "index",
  "directories": {
    "lib": "./lib"
  },
  "contributors": [
    {
      "name": "Tang Bo Hao",
      "email": "btspoony@gmail.com"
    },
    {
      "name": "Gui Lin",
      "email": "guileen@gmail.com"
    }
  ],
  "dependencies": {
    "oauth": ">=0.9.8"
  },
  "keywords": [
    "sdk",
    "facebook",
    "oauth",
    "oauth2",
    "restful",
    "social"
  ],
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "# Multi-platform Social Client for Node\nThis is general Social Client libs for most china's social network platforms.(iFrame Social Games)\n\n### Basic Common API Implemented:\n* \"qq\" - QZone/Pengyou\n* \"wyx\" - Sina Weiyouxi (Old style FB like, in-frame only, implemented)\n* \"renren\" - RenRen (OAuth2, implemented)\n\n### Payment Implemented:\n* \"qq\" - QZone/Pengyou\n\n### Not implement yet:\n* \"fb\" - Facebook\n\n## Dependence\n* Using node-oauth lib\n* The lib should be run on express/connect framework\n\n# How to use\n\n## Step 1: Create social factory\n\n\tvar socialClient = require('social');\n\t// you can create \"social facetory\" only once, and set to your app\n\tvar factory = socialClient({\n\t\tplatform_nameA : {key: key, secret: secret},\n\t\tplatform_nameB : {key: key, secret: secret}\n\t}, isDebugMode); // some platform debug mode using defferent api\n\n## Step 2 Create client: in the requests with query including social parameters given by platform\n\n\tvar snsInfo = factory.getAppEntryInfo( req ); // req is express/connect's request\n\tvar client = factory.createClient( snsInfo ); // Create a client by snsInfo\n\t\n## Step 3 Using commonAPIs: now your have the social client and you can use common apis\n\n\tclient.friends_ids(null, /* you can set some API additional parameters here */\n\t  function(err, data){\n\t  // for some api data will be including user's information\n\t});\n\n## Step 4 Common User Structure\nTo support all platform , user's social information structure will be converted to a common structure:\n\n\t{\n\t   id \t\t\t: String // User's ID in social platform\n\t , name \t\t: String // User's Name in social platform\n\t , imageUrl \t: String // User's image url\n\t , imageUrlLarge: String // User's large image url\n\t , gender\t\t: Boolean// true is male , false is female\n\t , isSpecial\t: Boolean// true means VIP of the social platform\n\t , specialType \t: Number // User's vip level\n\t}\n\nAnd other special data for defferent platform will be still in the object\n\n# How to use QQ Payment\n\n## Step 1 Send Payment Request\nstart a payment request\n\n\tvar client = factory.createClient( snsInfo ); // snsInfo can be stored in session, and using in each req\n\tclient.payment_request( param // \"param\" refer to http://wiki.open.qq.com/wiki/v3/pay/buy_goods\n\t  , functino(err, data){\n\t  \t/** importent parameter in data:\n\t  \t *\ttoken:\t\tpayment token id\n\t  \t *\turl_params: will using in frontend\n\t  \t */\n\t  });\n\n## Step 2 FrontEnd JS Call\nUsing social's common client JS or QQ's fusion2.dialog.buy // refer to http://wiki.open.qq.com/wiki/fusion2.dialog.buy.\nIn this step, player will send payment request to QQ platform.\n\n## Step 3 Platform Callback and onfirm payment\nAfter step 2, QQ platform will request to your callback url\n\t\n\t// QQ's request without user's snsinfo, but query including user's openid, you can get sns info from DB\n\tvar client = factory.createClient( \"qq\" ); // you also can create social client with string\n\t// if you can get user's sns info, pls create client by snsInfo\n\tclient.payment_callback(req, res // express's req and res\n\t , function onSuccess(callback) {\n    \t// this function will be called when \"sig\" checking succeeded\n    }\n    , function onFail(callback) {\n    \t// this function will be called when \"sig\" checking failed\n    })\n    , function onDelivery(err, data){ // Optional\n    \t// if you create client with sns info, this function will be called when delivery finished\n    });\n\n# CommonAPIs\n* ```acccount_info``` : get current user's info\n\t* support: _all_\n* ```friends_ids``` : get user's friends ids\n\t* support: _all_\n* ```appfriends_ids``` : get user's app friends(installed current application) ids\n\t* support: _all_\n* ```appfriends_info``` : get user's app friends detail info\n\t* support: _all_\n* ```is_app_user``` : check if the user installed current application\n\t* support: _all_\n* ```users_info``` : get user's info by ids array\n\t* support: _all_\n\n# Todo\n* implement Tencent logging system for qq\n* implement WeiYouXi payment\n\n# Contact me\n* Weibo: http://weibo.com/boisgames\n* Mail: btspoony[AT]gmail.com",
  "readmeFilename": "README.md",
  "_id": "social@0.4.0",
  "dist": {
    "shasum": "26505056845662577219e68f7e78df0d9f12f9f8",
    "tarball": "http://registry.npmjs.org/social/-/social-0.4.0.tgz"
  },
  "_from": "social@*",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "btspoony",
    "email": "btspoony@gmail.com"
  },
  "maintainers": [
    {
      "name": "btspoony",
      "email": "btspoony@gmail.com"
    }
  ],
  "_shasum": "26505056845662577219e68f7e78df0d9f12f9f8",
  "_resolved": "https://registry.npmjs.org/social/-/social-0.4.0.tgz"
}
